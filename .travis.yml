# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014-2020.

#
# See https://svn.boost.org/trac/boost/wiki/TravisCoverals for description of this file
# and how it can be used with Boost libraries.
#
# File revision #9 (with DIFF)

language: cpp
os: linux
dist: bionic

# `--coverage` flags required to generate coverage info for Coveralls
matrix:
  include:
#    - env: B2_ARGS='cxxstd=14,1y toolset=gcc-6 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD -fno-rtti" linkflags="--coverage -lasan -lubsan"'
#      name: "GCC-6, no RTTI"
#      addons:
#        apt:
#          sources: ubuntu-toolchain-r-test
#          packages: g++-6

    - env: B2_ARGS='cxxstd=14,17,2a toolset=gcc-10 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD" linkflags="--coverage  -lasan -lubsan"'
      name: "GCC-10"
      sudo: required # Required by leak sanitizer
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-10

    - env: B2_ARGS='cxxstd=14,17,2a toolset=gcc-8 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD" linkflags="--coverage  -lasan -lubsan"'
      name: "GCC-8"
      sudo: required # Required by leak sanitizer
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-8

    - env: B2_ARGS='cxxstd=1y toolset=gcc-5 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD" linkflags="--coverage  -lasan -lubsan"'
      name: "GCC-5"
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-5

#    - env: B2_ARGS='cxxstd=14,1y toolset=gcc-8 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD -fno-exceptions" linkflags="--coverage -lasan -lubsan"'
#      name: "GCC-8, no exceptions"
#      sudo: required # Required by leak sanitizer
#      addons:
#        apt:
#          sources: ubuntu-toolchain-r-test
#          packages: g++-8

    - env: B2_ARGS='cxxstd=14 toolset=clang-6 cxxflags="--coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD" linkflags="--coverage -fsanitize=address,leak,undefined"'
      name: "Clang-6"
      sudo: required # Required by leak sanitizer
      addons:
        apt:
          sources: llvm-toolchain-trusty-6
          packages: clang-6.0

    - env: B2_ARGS='cxxstd=14,17,20 toolset=clang-10 cxxflags="-stdlib=libc++ --coverage -fsanitize=address,leak,undefined -fno-sanitize-recover=undefined -DBOOST_TRAVISCI_BUILD" linkflags="-stdlib=libc++ --coverage -fsanitize=address,leak,undefined"'
      name: "Clang-10, libc++"
      sudo: required # Required by leak sanitizer
      addons:
        apt:
          sources: llvm-toolchain-bionic-10
          packages:
            - clang-10
            - libc++-10-dev
            - libc++abi-10-dev

    # Sanitizers disabled for this toolset as they started causing link troubles: 
    # hidden symbol `_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEm' isn't defined
    - env: B2_ARGS='cxxstd=14 toolset=clang-libc++ cxxflags="--coverage -DBOOST_TRAVISCI_BUILD" linkflags="--coverage"'
      name: "Clang-3.8, libc++"
      addons:
        apt:
          packages: libc++-dev

###############################################################################################################
# From this point and below code is same for all the Boost libs
###############################################################################################################

# Installing additional tools
addons:
  apt:
    sources: git-core
    packages:
    - git
    - python-yaml

before_install:
  # Autodetect Boost branch by using the following code: - BOOST_BRANCH=$TRAVIS_BRANCH
  # or just directly specify it
  - BOOST_BRANCH=develop && [ "$TRAVIS_BRANCH" == "master" ] && BOOST_BRANCH=master || true

  # Files, which coverage results must be ignored (files from other projects).
  # Example: - IGNORE_COVERAGE='*/boost/progress.hpp */filesystem/src/*'
  - IGNORE_COVERAGE=''

  # Explicitly remove the following library from Boost and use the folder for tests. This may be usefull, if you're for example running Travis
  # from `Boost.DLL` repo, while Boost already has `dll`.
  #
  # By default is eaual to - BOOST_LIBS_FOLDER=$(basename $TRAVIS_BUILD_DIR)
  # This will force to use local repo content, instead of the Boost's default.
  - BOOST_LIBS_FOLDER=pfr #$(basename $TRAVIS_BUILD_DIR)

  # Global options for sanitizers
  - UBSAN_OPTIONS=print_stacktrace=1
  - LSAN_OPTIONS=verbosity=1:log_threads=1

  # Cloning minimal set of Boost libraries
  - BOOST=$HOME/boost-local
  - echo "Testing $BOOST_LIBS_FOLDER, to remove $BOOST/libs/$BOOST_LIBS_FOLDER, testing branch $BOOST_BRANCH"
  - git clone -b $BOOST_BRANCH --depth 10 https://github.com/boostorg/boost.git $BOOST
  - cd $BOOST
  - git submodule update --init --depth 10 tools/build tools/boostdep tools/inspect libs/filesystem
  - python tools/boostdep/depinst/depinst.py --git_args "--depth 10 --jobs 2" $BOOST/libs/filesystem

  # Replacing Boost module with this project and installing Boost dependencies
  - rm -rf $BOOST/libs/$BOOST_LIBS_FOLDER
  - mv $TRAVIS_BUILD_DIR $BOOST/libs/$BOOST_LIBS_FOLDER
  - TRAVIS_BUILD_DIR=$BOOST/libs/$BOOST_LIBS_FOLDER
  - python tools/boostdep/depinst/depinst.py --git_args "--depth 10 --jobs 2" -I example -I examples $(basename $TRAVIS_BUILD_DIR)
  - git status

  # Adding missing toolsets and preparing Boost headers
  - ./bootstrap.sh
  - ./b2 headers
  - ./b2 -j4 variant=debug tools/inspect/build
  - |-
    echo "using gcc ;" >> ~/user-config.jam
    echo "using clang ;" >> ~/user-config.jam
    echo "using clang : 3.8 : clang++-3.8 ;" >> ~/user-config.jam
    echo "using clang : 4 : clang++-4.0 ;" >> ~/user-config.jam
    echo "using clang : 5 : clang++-5.0 ;" >> ~/user-config.jam
    echo "using clang : 6 : clang++-6.0 ;" >> ~/user-config.jam
    echo "using clang : 7 : clang++-7.0 ;" >> ~/user-config.jam
    echo "using clang : 8 : clang++-8 ;" >> ~/user-config.jam
    echo "using clang : 10 : clang++-10 ;" >> ~/user-config.jam
    echo "using clang : libc++ : clang++-libc++ ;" >> ~/user-config.jam
  - cd $BOOST/libs/$BOOST_LIBS_FOLDER/test/

script:
  - sh -c "../../../b2 -j2 $B2_ARGS"
  - ../../../dist/bin/inspect ..

after_success:
  - exit 0  # we run coverage reports from GithubActions

  # Copying Coveralls data to a separate folder
  - mkdir -p $TRAVIS_BUILD_DIR/coverals
  - wget https://github.com/linux-test-project/lcov/archive/v1.15.zip
  - unzip v1.15.zip
  - LCOV="`pwd`/lcov-1.15/bin/lcov"

  # Preparing Coveralls data by changind data format to a readable one
  - echo "$LCOV --directory $BOOST/bin.v2/libs/$BOOST_LIBS_FOLDER --base-directory `pwd` --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info"
  - $LCOV --directory $BOOST/bin.v2/libs/$BOOST_LIBS_FOLDER --base-directory `pwd` --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info

  # ... erasing /test/ /example/ folder data
  - cd $BOOST
  - $LCOV --remove $TRAVIS_BUILD_DIR/coverals/coverage.info "/usr*" "*/$BOOST_LIBS_FOLDER/test/*" $IGNORE_COVERAGE "*/$BOOST_LIBS_FOLDER/tests/*" "*/$BOOST_LIBS_FOLDER/examples/*" "*/$BOOST_LIBS_FOLDER/example/*" -o $TRAVIS_BUILD_DIR/coverals/coverage.info

  # ... erasing data that is not related to this project directly
  - OTHER_LIBS=`grep "submodule .*" .gitmodules | sed 's/\[submodule\ "\(.*\)"\]/"\*\/boost\/\1\.hpp" "\*\/boost\/\1\/\*"/g'| sed "/\"\*\/boost\/$BOOST_LIBS_FOLDER\/\*\"/d" | sed ':a;N;$!ba;s/\n/ /g'`
  - echo $OTHER_LIBS
  - eval "$LCOV --remove $TRAVIS_BUILD_DIR/coverals/coverage.info $OTHER_LIBS -o $TRAVIS_BUILD_DIR/coverals/coverage.info"

  # Sending data to Coveralls
  - cd $TRAVIS_BUILD_DIR
  - gem install coveralls-lcov
  - coveralls-lcov coverals/coverage.info
